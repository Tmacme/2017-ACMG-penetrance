select(VAR_ID, CHROM, POS, ID, REF, ALT, CLNALLE, CLNSIG, everything()) %>%
mutate(CLNSIG = strsplit(CLNSIG,"|",fixed = T)) %>%
mutate(CLNDBN = strsplit(CLNDBN,"|",fixed = T))
#length discrepancy
rm_loc <- which(sapply(input$CLNSIG, length) != sapply(input$CLNDBN, length))
#find and remove "ALL"
input$CLNDBN[[rm_loc]] <- input$CLNDBN[[rm_loc]][!grepl("ALL",input$CLNDBN[[rm_loc]])]
#input <- mutate(input, CLNDSDBID = strsplit(CLNDSDBID,"|",fixed = T))
input <- unnest(input, CLNSIG, CLNDBN)
input$CLNSIG <- sapply(input$CLNSIG, function(x) as.numeric(x))
input$INTERP <- sapply(input$CLNSIG, function(x) any(x %in% c(4,5)) )
input
}
clinvar <- clean_clinvar(input)
clinvar_merged <- clinvar[(clinvar$VAR_ID %in% ACMG.1000g$Var_ID) & clinvar$INTERP,]
clinvar_merged <- clinvar[(clinvar$VAR_ID %in% ACMG.1000g$Var_ID) & clinvar$INTERP,]
inter <- clinvar_merged$VAR_ID
ACMG_merged <- ACMG.1000g[ACMG.1000g$Var_ID %in% inter,]
merged <- cbind(ACMG_merged[,c("GENE","AF","ID")], clinvar_merged,
ACMG_merged[,grep("[0-9]",colnames(ACMG.1000g))])
clinvar_bp <- c(nrow(clinvar), sum(clinvar$INTERP), nrow(merged)) %>%
setNames(c("ClinVar","Patho","in 1000G"))
ACMG_bp <- c(nrow(ACMG.1000g),intersect(clinvar$VAR_ID, ACMG.1000g$Var_ID) %>% length, nrow(merged)) %>%
setNames(c("1000G","ClinVar","Patho"))
par(mfrow=c(1,2))
clinvar_bp
ACMG_bp
barplot(clinvar_bp, main = "Breakdown of ClinVar Variants")
barplot(ACMG_bp, main = "Breakdown of ACMG Variants")
par(mfrow=c(1,1))
clinvar_merged <- clinvar[(clinvar$VAR_ID %in% ACMG.1000g$Var_ID) & clinvar$INTERP,]
inter <- clinvar_merged$VAR_ID
ACMG_merged <- ACMG.1000g[ACMG.1000g$Var_ID %in% inter,]
merged <- cbind(ACMG_merged[,c("GENE","AF","ID")], clinvar_merged,
ACMG_merged[,grep("[0-9]",colnames(ACMG.1000g))])
dim(ACMG_merged[,c("GENE","AF","ID")])
dim(clinvar_merged)
inter
dim(inter)
length(inter)
dim(clinvar_merged)
clinvar_merged <- clinvar[(clinvar$VAR_ID %in% ACMG.1000g$Var_ID) & clinvar$INTERP,]
inter <- clinvar_merged$VAR_ID
ACMG_merged <- ACMG.1000g[ACMG.1000g$Var_ID %in% inter,]
dim(ACMG_merged)
inter <- intersect(clinvar$VAR_ID, ACMG.1000g$Var_ID)
inter
length(inter)
clinvar$VAR_ID[clinvar$INTERP]
clinvar$VAR_ID[clinvar$INTERP] %>% length
dim(clinvar)
inter <- intersect(clinvar$VAR_ID[clinvar$INTERP], ACMG.1000g$Var_ID)
length(inter)
inter <- intersect(clinvar$VAR_ID[clinvar$INTERP], ACMG.1000g$Var_ID)
clinvar_merged <- clinvar[(clinvar$VAR_ID %in% inter),]
ACMG_merged <- ACMG.1000g[ACMG.1000g$Var_ID %in% inter,]
merged <- cbind(ACMG_merged[,c("GENE","AF","ID")], clinvar_merged,
ACMG_merged[,grep("[0-9]",colnames(ACMG.1000g))])
clinvar_bp <- c(nrow(clinvar), sum(clinvar$INTERP), nrow(merged)) %>%
setNames(c("ClinVar","Patho","in 1000G"))
merged <- cbind(ACMG_merged[,c("GENE","AF","ID")], clinvar_merged,
ACMG_merged[,grep("[0-9]",colnames(ACMG.1000g))])
dim(clinvar_merged)
dim(ACMG_merged)
duplicated(clinvar$merged)
duplicated(clinvar$VAR_ID)
which(duplicated(clinvar$VAR_ID))
unique(clinvar$VAR_ID) %>% length
length(clinvar$VAR_ID)
input <- read.table("/Users/jamesdiao/Documents/Kohane_Lab/clinvar.vcf", header = T,
stringsAsFactors = F, quote = "", sep = "\t")
input <- input[nchar(input$REF)==1,] #deletions
alt_num <- sapply(strsplit(input$ALT,","),length) #number of alts
acceptable_nchar <- 2*alt_num-1 #adds in the length from commas, if each alt is 1 nt.
input <- input[nchar(input$ALT)==acceptable_nchar,] #insertions
input$ALT <- strsplit(input$ALT,",")
split_all <- strsplit(input$INFO,";")
split_info <- function(name) {
sapply(split_all, function(entry) { #Extract CLNALLE
entry[grep(name,entry)]
}) %>% strsplit("=") %>% sapply(function(x) x[2]) %>% strsplit(",")
}
input$CLNALLE <- split_info("CLNALLE=") %>% sapply(as.numeric)
input$CLNSIG <- split_info("CLNSIG=")
input$CLNDBN <- split_info("CLNDBN=")
input$CLNDSDBID <- split_info("CLNDSDBID=")
#CLNALLE has 0,-1,3,4 --> CLNSIG has 1,2,3,4 --> ALT has 1.
taking <- sapply(input$CLNALLE, function(x) x[x>0] ) #Actual elements > 0. Keep these in CLNSIG and ALT
taking_loc <- sapply(input$CLNALLE, function(x) which(x>0) )#Tracks locations for keeping in CLNALLE
keep <- sapply(taking, length)>0 #reduce everything to get rid of 0 and -1
# Reduce, reduce, reduce.
taking <- taking[keep]
taking_loc <- taking_loc[keep]
input <- input[keep,]
#Make this more readable
input$ALT <- sapply(1:nrow(input), function(row) {
input$ALT[[row]][taking[[row]]]
})
col_subset <- function(name) {
sapply(1:nrow(input), function(row) {
unlist(input[row,name])[taking_loc[[row]]]
})
}
input$CLNSIG <- col_subset("CLNSIG")
input$CLNALLE <- col_subset("CLNALLE")
input$CLNDBN <- col_subset("CLNDBN")
input$CLNDSDBID <- col_subset("CLNDSDBID")
input$CLNDSDBID[1:10]
which(sapply(input$CLNDSDBID, length)>2)
which(sapply(input$CLNDSDBID, length)>2)[1:10]
which(sapply(input$CLNDSDBID, length)>2)[1:10] -> temp1
input$CLNDSDBID[temp1]
str(input)
sapply(input,str)
apply(input,2,str)
apply(input,2,typeof)
input <- unnest(input) %>% unite(VAR_ID, CHROM, POS, REF, ALT, sep = "_", remove = F) %>%
select(VAR_ID, CHROM, POS, ID, REF, ALT, CLNALLE, CLNSIG, everything()) %>%
mutate(CLNSIG = strsplit(CLNSIG,"|",fixed = T)) %>%
mutate(CLNDBN = strsplit(CLNDBN,"|",fixed = T))
input
input$CLNDSDBID[1:10]
input <- mutate(input, CLNDSDBID = strsplit(CLNDSDBID,"|",fixed = T))
input$CLNDSDBID[temp1]
temp1 <- temp1[4:8]
input$CLNDSDBID[temp1]
input$CLNDBN[temp1]
# Chunk 1: setup
knitr::opts_chunk$set(echo = FALSE)
suppressMessages(library(dplyr))
suppressMessages(library(tidyr))
suppressMessages(library(ggplot2))
root <- "/Users/jamesdiao/Box Sync/Gerstein/"
biofluid <- read.csv(file = "/Users/jamesdiao/Box Sync/Gerstein/Fall 2016/biofluid.csv", header = T)[,-1]
#save.image("/Users/jamesdiao/Box Sync/Gerstein/Fall 2016/test_10_1_2016")
#load("/Users/jamesdiao/Box Sync/Gerstein/Fall 2016/test_10_1_2016")
# Chunk 2: setup_2
#exRNA, excerpt
ex_root <- paste(root,"ERCC_4_25","exceRpt_",sep = "/")
#cellular, excerpt
c_root <- paste(root,"Total_Human_Data_2_13","exceRpt_",sep = "/")
ex_rna_reads <- read.table(file = paste(ex_root,"RNA_ReadsPerMillion.txt", sep="pi"), header = TRUE)
c_rna_reads <- read.table(file = paste(c_root,"RNA_ReadsPerMillion.txt", sep="pi"), header = TRUE)
id_match <- read.table("/Users/jamesdiao/Box\ Sync/Gerstein/Total_Human_Data_2_13/id_match_total_human", header = TRUE, stringsAsFactors = F, sep="\t")
new_samples = colnames(c_rna_reads)
id_match <- id_match[id_match$Sample.ID %in% new_samples,]
id_match <- id_match[order(id_match$Sample.ID),]
tab_types <- table(id_match$Category)
to.rm <- c(names(tab_types)[tab_types<14], "exRNA")
study <- id_match$Accession
tissue <- id_match$Category
samples_all = id_match$Sample.ID
remaining_tissue <- tissue[!(tissue %in% to.rm)]
na.cols <- apply(c_rna_reads, 2, anyNA)
tissues <- sapply(unique(remaining_tissue), function(x) remaining_tissue == x)[-which(na.cols),]
c_rna_reads <- c_rna_reads[,!(tissue %in% to.rm) & !na.cols]
t(ex_rna_reads)[1:5,1:5]
t(ex_rna_reads)[1:5,1:5] %>% colnames
t(ex_rna_reads)[1:5,1:5] %>% rownames
?sample
?rbinom
plot(runif(nrow(ex_rna_reads)) < 0.1)
mean(runif(nrow(ex_rna_reads)) < 0.1)
length(runif(nrow(ex_rna_reads)) < 0.1)
dim(ex_rna_reads)
par(mfrow = c(1,2))
nonzero_sd <- apply(ex_rna_reads,1,sd) > 0
ex_rna_reads <- ex_rna_reads[nonzero_sd,]
nonzero_sd <- apply(c_rna_reads,1,sd) > 0
c_rna_reads <- c_rna_reads[nonzero_sd,]
ex_cor <- cor(t(ex_rna_reads[runif(nrow(ex_rna_reads)) < 0.1,]))
keep <- sapply(1:(nrow(ex_cor)-1), function(i) max(ex_cor[i,(i+1):ncol(ex_cor)]) < 0.99) %>% c(T)
plot(keep, main = sprintf("mean = %s",mean(keep) %>% signif(3)))
ex_rna_reads <- ex_rna_reads[keep,]
c_cor <- cor(t(c_rna_reads[runif(nrow(c_rna_reads)) < 0.1,]), use = "complete.obs")
keep <- sapply(1:(nrow(c_cor)-1), function(i) max(c_cor[i,(i+1):ncol(c_cor)]) < 0.99) %>% c(T)
plot(keep, main = sprintf("mean = %s",mean(keep) %>% signif(3)))
c_rna_reads <- c_rna_reads[keep,]
par(mfrow = c(1,1))
matrix(c(1,2,3,4,5,6,7,8,9), nrow = 3)
matrix(c(1,2,3,4,5,6,7,8,9), nrow = 3) -> temp
temp
plot(keep, main = sprintf("mean = %s",mean(keep) %>% signif(3)))
x <- matrix(c(1,2,3,1,2,4,1,2,5), nrow = 3)
x
t(x)%*%x
a = c(1,2,4)
b = c(-2,3,-1)
c = c(2,1,-1)
sum(a*b)
sum(a*c)
sum(b*c)
cbind(a,b,c)
cbind(a,b,c) %>% t
library(dplyr)
cbind(a,b,c) %>% t
cbind(a,b,c) %>% t -> a
a
cbind(a,b,c) ->a
t(a) %*% a
a
t
a = c(1,2,4)
cbind(a,b,c)
cbind(a,b,c)->a
t(a) %*% a
for(i in 1:100000) print(i)
# Chunk 1: setup
knitr::opts_chunk$set(echo = FALSE)
# Chunk 2: packages
#save.image("/Users/jamesdiao/Documents/Kohane_Lab/test_10_1_2016")
#load("/Users/jamesdiao/Documents/Kohane_Lab/test_10_1_2016")
suppressMessages(library(dplyr))
suppressMessages(library(tidyr))
suppressMessages(library(ggplot2))
suppressMessages(library(scrapeR))
suppressMessages(library(RMySQL))
# Chunk 3: population_map
#download phase 3 populations map
download.file(url = "ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/release/20130502/integrated_call_samples_v3.20130502.ALL.panel", destfile = paste(getwd(),"phase3map.txt",sep = "/"), method = "internal")
map <- read.table(file = paste(getwd(),"phase3map.txt",sep = "/"), header = T) %>% tbl_df
unlink("phase3map.txt")
header <- c("CHROM", "POS", "ID", "REF", "ALT", "QUAL", "FILTER", "INFO", "FORMAT",
as.character(map$sample))
map[1:3,]
# Chunk 4: population_data
pop.data <- structure(list(Population = structure(1:26,
.Label = c("ACB", "ASW", "ESN", "GWD", "LWK", "MSL", "YRI", "CLM", "MXL",
"PEL", "PUR", "CDX", "CHB", "CHS", "JPT", "KHV", "CEU", "FIN", "GBR",
"IBS", "TSI", "BEB", "GIH", "ITU", "PJL", "STU"), class = "factor"),
Fraction = rep(1L,26),
Superpopulation = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L,
3L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 4L, 4L, 5L, 5L, 5L, 5L, 5L),
.Label = c("AFR", "AMR", "EAS", "EUR", "SAS"), class = "factor")),
.Names = c("Population", "Fraction", "Superpopulation"),
row.names = c("ACB", "ASW", "ESN", "GWD", "LWK", "MSL", "YRI", "CLM",
"MXL", "PEL", "PUR", "CDX", "CHB", "CHS", "JPT", "KHV",
"CEU", "FIN", "GBR", "IBS", "TSI", "BEB", "GIH", "ITU",
"PJL", "STU"), class = "data.frame") %>% tbl_df
pop.table <- structure(list(`Population Code` = structure(c(6L, 16L, 7L, 4L,
17L, 5L, 25L, 10L, 11L, 14L, 26L, 18L, 13L, 19L, 9L, 2L, 1L,
20L, 23L, 8L, 21L, 12L, 22L, 3L, 24L, 15L), .Label = c("ACB",
"ASW", "BEB", "CDX", "CEU", "CHB", "CHS", "CLM", "ESN", "FIN",
"GBR", "GIH", "GWD", "IBS", "ITU", "JPT", "KHV", "LWK", "MSL",
"MXL", "PEL", "PJL", "PUR", "STU", "TSI", "YRI"), class = "factor"),
`Population Description` = structure(c(11L, 14L, 22L, 5L,
15L, 25L, 24L, 8L, 4L, 12L, 26L, 16L, 9L, 17L, 7L, 2L, 1L,
18L, 20L, 6L, 19L, 10L, 21L, 3L, 23L, 13L), .Label = c("African Caribbeans in Barbados",
"Americans of African Ancestry in SW USA", "Bengali from Bangladesh",
"British in England and Scotland", "Chinese Dai in Xishuangbanna, China",
"Colombians from Medellin, Colombia", "Esan in Nigeria",
"Finnish in Finland", "Gambian in Western Divisions in the Gambia",
"Gujarati Indian from Houston, Texas", "Han Chinese in Bejing, China",
"Iberian Population in Spain", "Indian Telugu from the UK",
"Japanese in Tokyo, Japan", "Kinh in Ho Chi Minh City, Vietnam",
"Luhya in Webuye, Kenya", "Mende in Sierra Leone", "Mexican Ancestry from Los Angeles USA",
"Peruvians from Lima, Peru", "Puerto Ricans from Puerto Rico",
"Punjabi from Lahore, Pakistan", "Southern Han Chinese",
"Sri Lankan Tamil from the UK", "Toscani in Italia",
"Utah Residents (CEPH) with Northern and Western Ancestry",
"Yoruba in Ibadan, Nigeria"), class = "factor"),
`Super Population Code` = structure(c(3L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 4L, 4L,
1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L, 5L, 5L, 5L, 5L, 5L),
.Label = c("AFR", "AMR", "EAS", "EUR", "SAS"), class = "factor")),
row.names = c(NA, -26L), class = c("tbl_df", "tbl", "data.frame"),
.Names = c("Population Code", "Population Description", "Super Population Code")) %>% tbl_df
# Super and specific population codes
super <- pop.table$`Super Population Code` %>% as.character
names(super) <- pop.table$`Population Code`
# desired plotting order of populations (alphabetal WITHIN each superpopulation)
ord <- super[levels(map$pop)] %>% order
# levels of superpopulation ("AFR","AMR","EAS","EUR","SAS")
super.levels <- sort(unique(super))
# levels of population ("ACB","ASW","ESN"..."CEU","FIN","GBR"...)
pop.levels <- levels(map$pop)[ord]
print(super, quote = F)
Population = factor(as.character(map$pop), levels = pop.levels)
ggplot(map, aes(map$super_pop, fill = Population)) + geom_bar(color = 'black', width = 0.5) +
ylab ("No. of Individuals") + xlab ("Superpopulation") + ggtitle("1000 Genomes - Samples by Population")
rm(Population)
# Chunk 5: scrape_acmg
### Scraped Clinvar website for ACMG-relevant genes
ACMG.panel <- c("APC", "MYH11", "ACTA2", "MYLK", "TMEM43", "DSP", "PKP2", "DSG2",
"DSC2", "BRCA1", "BRCA2", "SCN5A", "RYR2", "LMNA", "MYBPC3", "COL3A1",
"GLA", "APOB", "LDLR", "MYH7", "TPM1", "PRKAG2", "TNNI3", "MYL3",
"MYL2", "ACTC1", "RET", "PCSK9", "TNNT2", "TP53", "TGFBR1", "TGFBR2",
"SMAD3", "KCNQ1", "KCNH2", "MLH1", "MSH2", "MSH6", "PMS2", "RYR1",
"CACNA1S", "FBN1", "MEN1", "MUTYH", "NF2", "SDHD", "SDHAF2", "SDHC",
"SDHB", "STK11", "PTEN", "RB1", "TSC1", "TSC2", "VHL", "WT1")
ACMG.panel
for (con in dbListConnections(MySQL())) dbDisconnect(con)
con <- dbConnect(MySQL(), user = 'genome',
dbname = 'hg19', host = 'genome-mysql.cse.ucsc.edu',
unix.sock = "/Applications/MAMP/tmp/mysql/mysql.sock")
query <- function (input) { suppressWarnings(dbGetQuery(con, input)) }
system("unzip 1000G.zip", intern = T)
download_1000g <- function(gene) {
gene %>% paste(which(ACMG.panel==gene)) %>% paste(length(ACMG.panel), sep = "/") %>% print
refGene <- sprintf("select * from refGene where name2 = \"%s\" limit 20", gene) %>% query
UCSC <- select(refGene, name, chrom, start = txStart, end = txEnd)
if (nrow(UCSC) == 0) #No hit on refGene
print("NOT FOUND")
else {
if (nrow(UCSC) > 1) { #Multiple hits: take the widest range
UCSC <- UCSC[which.max(UCSC$end-UCSC$start),]
}
# gets [n] from chr[n]
chrom.num <- strsplit(UCSC$chrom, split = "chr")[[1]][2]
# different version for chromosomes X and Y
version <- switch(chrom.num, "X" = "shapeit2_mvncall_integrated_v1b",
"Y" = "integrated_v2a", "shapeit2_mvncall_integrated_v5a")
command <- paste("tabix -h ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/release/20130502/ALL.%s.",
"phase3_%s.20130502.genotypes.vcf.gz %s:%s-%s > %s_genotypes.vcf", sep = "")
sprintf(command, UCSC$chrom, version, chrom.num, UCSC$start, UCSC$end, gene) %>% system
# Checks whether the file exists
exists <- grepl(paste(gene,"_genotypes.vcf",sep =""), system("ls", intern = T)) %>% sum > 0
file.size <- strsplit(paste("stat ","_genotypes.vcf", sep = gene) %>% system(intern = T), " ")[[1]][8]
if (exists & file.size > 0) {
print("SUCCESS")
unlist(UCSC)
} else {
print("UNKNOWN FAILURE")
}
}
}
getwd()
dirname(parent.frame(2)$ofile)
getSrcDirectory()[1]
dirname(rstudioapi::getActiveDocumentContext()$path)
File <- "filename"
Files <- list.files(path=file.path("~"),recursive=T,include.dirs=T)
Path.file <- names(unlist(sapply(Files,grep,pattern=File))[1])
Path.file
dirname(sys.frame(1)$ofile)
source ("project/path/file.R", chdir = TRUE)
parent.frame(2)
parent.frame(2) %>% str
parent.frame()
parent.frame(1
)
parent.frame(3)
parent.frame()
parent.frame()$o
knitr:::input_dir()
?system
system("ls")
setwd("/Users/jamesdiao/Documents/Kohane_Lab/")
getwd()
setwd("/Users/jamesdiao/Documents/Kohane_Lab/Users/jamesdiao/Documents/Kohane_Lab/2016-paper-ACMG-penetrance")
setwd("/Users/jamesdiao/Documents/Kohane_Lab/2016-paper-ACMG-penetrance")
getwd()
paste(getwd(),"1000G",sep = "/")
getwd()
system("ls")
system("ls -l")
system("ls -l")
system("ls")
system("ls",intern = T)
system("ls",intern = T) %in% "1000G"
"1000G" %in% system("ls",intern = T)
system("ls",intern = T)
system("ls -l",intern = T)
system("ls -l .*/",intern = T)
system("ls .*/",intern = T)
echo */
system("echo */",intern = T)
system("ls -d .*/",intern = T)
system("ls -d */",intern = T)
getwd()
load("/Users/jamesdiao/Documents/Kohane_Lab/test_10_1_2016")
?save
ACMG.1000g[1:5,1:5]
?write.csv
getwd()
write.csv(ACMG.1000g, file = paste(getwd(),ACMG_1000G,sep = "/"), quote = F, sep = ",", row.names = FALSE)
write.csv(ACMG.1000g, file = paste(getwd(),ACMG_1000G,sep = "/"), quote = F, row.names = FALSE)
write.csv(ACMG.1000g, file = paste(getwd(),"ACMG_1000G",sep = "/"), quote = F, row.names = FALSE)
apply(ACMG.1000g[,1:20], 2, typeof)
apply(ACMG.1000g[1:5,1:20], 2, str)
ACMG.1000g[1:5,1:5]
ACMG.1000g[1:5,1:20]
ACMG.1000g[,1:20]
ACMG.1000g[1:5,1:20]
unique(ACMG.1000g[,20])
unique(ACMG.1000g[,20]) %>% typeof
typeof(ACMG.1000g[1,20])
apply(ACMG.1000g[,20:22], 2, typeof)
sum(apply(ACMG.1000g[,20:ncol(ACMG.1000g)], 2, typeof)!="integer")
apply(ACMG.1000g[1:5,1:20], 2, typeof)
apply(ACMG.1000g[1:5,1:25], 2, typeof)
apply(ACMG.1000g[1:5,20:25], 2, typeof)
typeof(ACMG.1000g[1:5,1:5])
str(ACMG.1000g[1:5,1:20])
typeof(ACMG.1000g[1,1])
typeof(ACMG.1000g$GENE)
sapply(ACMG.1000g[1:5,1:20], class)
sapply(ACMG.1000g[1:5,1:15], class)
sapply(ACMG.1000g[1:5,1:12], class)
sapply(ACMG.1000g[1:5,1:12], class) %>% dput
dim(ACMG.1000g)
colclass <- c("factor", "numeric", "character", "character", "integer",
"character", "character", "character", "integer", "character",
"character", "character")
2516-length(colclass)
colclass <- c("factor", "numeric", "character", "character", "integer",
"character", "character", "character", "integer", "character",
"character", "character", rep("integer",2504))
length(colclass)
ACMG.1000G <- read.csv(file = "ACMG_1000G.csv", header = TRUE,
row.names = F, colClasses = colclass, stringsAsFactors = F)
length(colclass)
colnames(ACMG.1000g[,1:20])
colclass <- c("factor", "numeric", "character", "character", "integer",
"character", "character", "character", "integer", "character",
"character", "character", rep("integer",2504))
ACMG.1000g <- read.csv(file = "ACMG_1000G.csv", header = TRUE,
row.names = F, colClasses = colclass, stringsAsFactors = F)
system("ls */",intern = T)
system("ls",intern = T)
"ACMG_1000G.csv" %in% system("ls *.csv",intern = T)
paste(getwd(), "1000G", sep = "/")
system("ls")
ACMG.1000g <- read.csv(file = "ACMG_1000G.csv", header = TRUE,
row.names = F, colClasses = colclass, stringsAsFactors = F)
ACMG.1000g <- read.csv(file = "ACMG_1000G.csv", header = TRUE,
row.names = F, stringsAsFactors = F)
getwd()
?save
ACMG.1000g <- save(file = "ACMG_1000G.csv")
ACMG.1000g %>% dim
load("/Users/jamesdiao/Documents/Kohane_Lab/test_10_1_2016")
save(ACMG.1000g, file = "ACMG_1000G.RData")
ACMG.1000g <- load(file = "ACMG_1000G.RData")
ACMG.1000g[1:5,1:5]
str(ACMG.1000g)
ACMG.1000g <- load(file = "ACMG_1000G.RData")
dim(ACMG.1000g)
dim(ACMG.1000g)
ACMG.1000g
?load
load("/Users/jamesdiao/Documents/Kohane_Lab/2016-paper-ACMG-penetrance/ACMG_1000G.RData")
ACMG.1000g[1:5,1:5]
write.csv(ACMG.1000g, file = paste(getwd(),"ACMG_1000G.csv",sep = "/"), quote = F, row.names = FALSE)
write.csv(ACMG.1000g, file = paste(getwd(),"ACMG_1000G.csv",sep = "/"), quote = F, row.names = FALSE)
getwd()
system("mkdir 1000G")
matrix(c(1,-2,-2,-2,4,4,-2,4,4), nrow = 4)
matrix(c(1,-2,-2,-2,4,4,-2,4,4), nrow = 3)
matrix(c(1,-2,-2,-2,4,4,-2,4,4), nrow = 3) -> a
matrix(c(4,4,-2,4,4,-2,-2,-2,1), nrow = 3)
matrix(c(4,4,-2,4,4,-2,-2,-2,1), nrow = 3) -> b
a %*% b
skip_download = F
skip_processing = F
# Chunk 1: setup
knitr::opts_chunk$set(echo = F, eval = F, cache = T)
# Chunk 2: packages
#save.image("/Users/jamesdiao/Documents/Kohane_Lab/test_10_1_2016")
#load("/Users/jamesdiao/Documents/Kohane_Lab/test_10_1_2016")
suppressMessages(library(dplyr))
suppressMessages(library(tidyr))
suppressMessages(library(ggplot2))
suppressMessages(library(scrapeR))
suppressMessages(library(RMySQL))
skip_download <- "1000G" %in% system("ls -d */",intern = T)
skip_processing <- "ACMG_1000G.RData" %in% system("ls *.RData",intern = T)
# Chunk 3: population_map
#download phase 3 populations map
download.file(url = "ftp://ftp.1000genomes.ebi.ac.uk/vol1/ftp/release/20130502/integrated_call_samples_v3.20130502.ALL.panel", destfile = paste(getwd(),"phase3map.txt",sep = "/"), method = "internal")
map <- read.table(file = paste(getwd(),"phase3map.txt",sep = "/"), header = T) %>% tbl_df
unlink("phase3map.txt")
header <- c("CHROM", "POS", "ID", "REF", "ALT", "QUAL", "FILTER", "INFO", "FORMAT",
as.character(map$sample))
map[1:3,]
# Chunk 4: population_data
pop.data <- structure(list(Population = structure(1:26,
.Label = c("ACB", "ASW", "ESN", "GWD", "LWK", "MSL", "YRI", "CLM", "MXL",
"PEL", "PUR", "CDX", "CHB", "CHS", "JPT", "KHV", "CEU", "FIN", "GBR",
"IBS", "TSI", "BEB", "GIH", "ITU", "PJL", "STU"), class = "factor"),
Fraction = rep(1L,26),
Superpopulation = structure(c(1L, 1L, 1L, 1L, 1L, 1L, 1L, 2L, 2L, 2L, 2L,
3L, 3L, 3L, 3L, 3L, 4L, 4L, 4L, 4L, 4L, 5L, 5L, 5L, 5L, 5L),
.Label = c("AFR", "AMR", "EAS", "EUR", "SAS"), class = "factor")),
.Names = c("Population", "Fraction", "Superpopulation"),
row.names = c("ACB", "ASW", "ESN", "GWD", "LWK", "MSL", "YRI", "CLM",
"MXL", "PEL", "PUR", "CDX", "CHB", "CHS", "JPT", "KHV",
"CEU", "FIN", "GBR", "IBS", "TSI", "BEB", "GIH", "ITU",
"PJL", "STU"), class = "data.frame") %>% tbl_df
a = rbind(c(1,0,0,0),c(0,1,0,0),c(0,0,1,0))
a
t(a)
t(a) -> a
a
a %*% t(a)
t(a) %*%a
t(a) %*% a
a %*% t(a)
?rbindlist
library(data.table)
install.packages("data.table")
library(data.table)
?rbindlist
?rbind.fill
?rbind
getwd()
system("ls")
system("ls */")
system("ls -d")
system("ls -d */")
folders <- system("ls -d */", intern = T)
folders
system("ls")
